{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["headers","Accept","Content-type","App","react_default","a","createElement","className","App_MyDropzone","Component","MyDropzone","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","arrayBuffer","mammoth","extractRawText","text","value","axios","url","method","console","log","setState","acceptedFiles","_this2","reader","FileReader","readAsArrayBuffer","onload","_ref3","target","result","onFileRead","_this3","onData","react_json_tree_lib_default","theme","invertTheme","hideRoot","JSON","stringify","es","onDrop","getDocData","_ref4","getRootProps","getInputProps","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oZAQMA,EAAU,CACdC,OAAQ,mBACRC,eAAgB,cAgBHC,mLAXX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACE,EAAD,eANQC,aAeZC,cAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,KAAM,MAFHR,kHAKFS,+FACeC,IAAQC,eAAe,CAAEF,uCAAxCG,IAAPC,eACeC,IAAM,CAC3B1B,UACA2B,IAhCG,uCAiCHC,OAAQ,OACRR,KAAMI,oBAJAJ,SAORS,QAAQC,IAAIV,GACZL,KAAKgB,SAAS,CAACX,gJAGNY,GAAe,IAAAC,EAAAlB,KAClBmB,EAAS,IAAIC,WACnBD,EAAOE,kBAAkBJ,EAAc,IACvCE,EAAOG,OAAS,SAAAC,GAAyC,IAApBjB,EAAoBiB,EAAtCC,OAAUC,OAC3BP,EAAKQ,WAAWpB,qCAIX,IAAAqB,EAAA3B,KACAK,EAAQL,KAAKI,MAAbC,KACDuB,EACJvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,CAAUe,KAAMA,EAAMyB,MAAOA,EAAOC,aAAa,EAAOC,UAAU,IAClE3C,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAeyC,KAAKC,UAAU7B,EAAM,KAAM,KAElE,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAUC,OAAQ,SAAAnB,GAAa,OAAIU,EAAKU,WAAWpB,KAChD,SAAAqB,GAAA,IAAGC,EAAHD,EAAGC,aAAcC,EAAjBF,EAAiBE,cAAjB,OACCnD,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,MAASgD,IACPlD,EAAAC,EAAAC,cAAA,QAAWiD,KACXnD,EAAAC,EAAAC,cAAA,sDAKRF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACCc,GAAQuB,WAlDMlC,aAyDnBoC,EAAQ,CACZW,OAAQ,UACRC,OAAQ,0CACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,WC3FUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.481cd0ab.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Dropzone from 'react-dropzone'\nimport mammoth from 'mammoth'\nimport axios from 'axios'\nimport './App.css'\nimport JSONTree from 'react-json-tree'\n\nconst url = `http://wit.istc.cnr.it:9090/enhancer`\nconst headers = {\n  Accept: 'application/json',\n  'Content-type': 'text/plain',\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <div className='App-body'>\n          <h1>Stanbol based enhancer</h1>\n          <MyDropzone />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nclass MyDropzone extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {data: null}\n  }\n\n  async onFileRead(arrayBuffer) {\n    const { value: text } = await mammoth.extractRawText({ arrayBuffer })\n    const { data } = await axios({\n      headers,\n      url,\n      method: 'post',\n      data: text,\n    })\n\n    console.log(data)\n    this.setState({data})\n  }\n\n  getDocData(acceptedFiles) {\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(acceptedFiles[0]);\n    reader.onload = ({ target: { result: arrayBuffer } }) => {\n      this.onFileRead(arrayBuffer)\n    } \n  }\n\n  render() {\n    const {data} = this.state\n    const onData = (\n      <div>\n        <JSONTree data={data} theme={theme} invertTheme={false} hideRoot={true}/>\n        <h3>Raw output: </h3>\n        <textarea className='rawDataArea'>{JSON.stringify(data, null, 2)}</textarea>\n      </div>)\n    return (\n      <div>\n        <Dropzone onDrop={acceptedFiles => this.getDocData(acceptedFiles)}>\n          {({ getRootProps, getInputProps }) => (\n            <section>\n              <div {...getRootProps()}>\n                <input {...getInputProps()} />\n                <p>Click here and upload a Word Document</p>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n        <div>\n          <h2>Annotations: </h2>\n          {data && onData}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst theme = {\n  scheme: 'monokai',\n  author: 'wimer hazenberg (http://www.monokai.nl)',\n  base00: '#272822',\n  base01: '#383830',\n  base02: '#49483e',\n  base03: '#75715e',\n  base04: '#a59f85',\n  base05: '#f8f8f2',\n  base06: '#f5f4f1',\n  base07: '#f9f8f5',\n  base08: '#f92672',\n  base09: '#fd971f',\n  base0A: '#f4bf75',\n  base0B: '#a6e22e',\n  base0C: '#a1efe4',\n  base0D: '#66d9ef',\n  base0E: '#ae81ff',\n  base0F: '#cc6633'\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}